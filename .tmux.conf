# Prefix {{{
# Set prefix key to c-g instead of default c-b
unbind C-b
set -g prefix C-g
bind C-g send-prefix
# reload config file (change file location to your the tmux.conf you want to use)
bind C-r source-file ~/.tmux.conf \; display-message "Config reloaded."
# }}}
# macOS {{{
# copy to macOS clipboard
    if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
    if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# }}}
# Settings {{{
# mouse
set -g mouse off

if-shell 'uname | grep -q Darwin' {
    set -g default-shell /usr/local/bin/zsh
}{
    set -g default-shell /usr/bin/zsh
}
# force tmux to use utf-8
setw -gq utf8 on
set -gq status-utf8 on
# Set the delay so that it doesn't interfere with applications like
# vim
set -sg escape-time 0
# Make window and pane indexes start with 1
set -g base-index 1
setw -g pane-base-index 1

# set the scrollback
set -g history-limit 200000
set-window-option -g mode-keys vi
setw -g aggressive-resize on

setw -g mode-keys vi
setw -g monitor-activity off
set -g visual-activity off


bind -n M-b set-option status
# }}}
# Colors&Themes {{{
# Set the proper terminal type
set -g default-terminal "alacritty"
set -gs terminal-overrides ",*:RGB"
set -g status-bg black
set -g status-fg white
# set -g status-bg "#000000"
# set -g status-fg "#606580"
# set -g status-right '#(gitmux "#{pane_current_path}")'

# source-file ~/.tmux.snazzy.theme

# Colors&Themes }}}
# Keys {{{
# copy-mode-vi table {{{
# bind Enter copy-mode # enter copy mode
# run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
# run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
# run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'
# }}}
# Sessions {{{
# prefix s 		list sessios
# prefix :new	new session
# prefix $ 		rename current session
# prefix ( 		previous session
# prefix ) 		next session
# prefix L 		last session
# create session
bind C-N new-session
# find session
# bind f command-prompt -p find-session 'switch-client -t %%'
# bind-key s choose-tree
# bind-key W choose-tree
# bind-key w choose-window
# bind-key -n M-w choose-window

# rename session
# bind-key S command-prompt -I "#S" "rename-session '%%'"
# }}}
# Windows {{{
# prefix w	list windows
# prefix c	new window
# prefix ,	rename the current window
# prefix &	kill the current window
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on # renumber windows when a window is closed
set -g set-titles on # set terminal title

# new and close
bind N new-window
# bind x kill-window
# bind & confirm-before -p "kill-window #W? (y/n)" kill-window
# bind c confirm-before -p "kill-window #W? (y/n)" kill-window
# only; close all others
# bind O confirm-before -p "kill-window all other windows? (y/n)" kill-window -a

unbind l
# window navigation

# select previous and next 
bind -r p previous-window
bind -r n next-window
bind -r -n M-p previous-window # select previous window
bind -r -n M-n next-window     # select next window

# select by moving around
# N/A

# select by number
# use default
bind -n M-1 select-window -t :1
bind -n M-2 select-window -t :2
bind -n M-3 select-window -t :3
bind -n M-4 select-window -t :4
bind -n M-5 select-window -t :5
bind -n M-6 select-window -t :6
bind -n M-7 select-window -t :7
bind -n M-8 select-window -t :8

# select first and last or say top and bottom
bind ^ select-window -t :1
bind $ run-shell "tmux select-window -t $(tmux list-windows | wc -l)"
bind 0 select-window -t :1
bind 9 run-shell "tmux select-window -t $(tmux list-windows | wc -l)"

# bind -n M-i select-window -t :1
# bind -n M-o run-shell "tmux select-window -t $(tmux list-windows | wc -l)"


# select last accessed
bind -r Tab last-window
bind -n -r M-Tab last-window

# move window/tab around
bind-key -r < swap-window -t -1\; select-window -t -1
bind-key -r > swap-window -t +1\; select-window -t +1
bind-key -n -r M-, swap-window -t -1\; select-window -t -1
bind-key -n -r M-. swap-window -t +1\; select-window -t +1

# move window/tab to first/last
bind C-d swap-window -t :1\; select-window -t :1
bind C-f run-shell "tmux swap-window -t :$(tmux list-windows | wc -l);tmux select-window -t $(tmux list-windows | wc -l)"

# move window/tab to 1..9
# bind  swap-window -t :1\; select-window -t :1


# prompt to move window
# bind-key . command-prompt "move-window -t '%%'"

# rotate windows/tabs

# bind-key -r -n M-! swap-window -t 1\; select-window -t 1
# bind-key -r -n M-@ swap-window -t 2\; select-window -t 2

# rename windows
# bind-key % command-prompt -I "#W" "rename-window '%%'"

# }}}
# Panes {{{
# set -g display-panes-time 800 # slightly longer pane indicators display time
# set -g display-time 1000 # slightly longer status messages display time

# new and close
# just split window
# kill current pane
# unbind x
# bind x confirm-before -p "kill-pane #P? (y/n)" kill-pane
# only; close all others
# bind o confirm-before -p "kill-pane all other panes? (y/n)" kill-pane -a



# split
# unbind '"'
# unbind %
bind s split-window -v
bind v split-window -h
bind -n M-s split-window -v
bind -n M-v split-window -h


# select previous and next 
bind -r C-p select-pane -t :.-
bind -r C-n select-pane -t :.+

# select by moving around
# pane navigation
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right
# Use Alt-vim keys without prefix key to switch panes
bind -r -n M-h select-pane -L
bind -r -n M-j select-pane -D 
bind -r -n M-k select-pane -U
bind -r -n M-l select-pane -R

# select by number

# select first and last or say top and bottom
bind t select-pane -t top-left
bind T select-pane -t top-right
bind b select-pane -t bottom-left
bind B select-pane -t bottom-right

# select last accessed
# default is: ;
bind ';' last-pane -Z
bind -n M-';' last-pane -Z

# unbind ';'
# bind ';' last-pane

# move pane around
# and use {} move by +-1
# bind-key          { swap-pane -U
# bind-key          } swap-pane -D
bind -r H swap-pane -t left \; select-pane -t left
bind -r J swap-pane -t bottom \; select-pane -t bottom
bind -r K swap-pane -t top \; select-pane -t top
bind -r L swap-pane -t right \; select-pane -t right


# rotate panes
# bind x swap-pane -U \; last-pane
unbind C-o
bind r rotate-window -U -Z
bind R rotate-window -Z

# resize
bind -r C-h resize-pane -L
bind -r C-j resize-pane -D
bind -r C-k resize-pane -U
bind -r c-l resize-pane -R

# move window to new Tab
# unbind '!'
# bind C-t break-pane
# bind -n M-t break-pane

# display time

bind ` clock-mode


# }}}
# TPM {{{
#Installing plugins
#
#    Add new plugin to ~/.tmux.conf with set -g @plugin '...'
#    Press prefix + I (capital I, as in Install) to fetch the plugin.
#
# prefix alt+u  uninstall
# prefix U	    update

# https://github.com/tmux-plugins/tpm
# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'jimeh/tmux-themepack'
# I use C-h, C-l very much, this plugin doesn't fit for me.
# set -g @plugin 'christoomey/vim-tmux-navigator'
# set -g @themepack 'powerline/block/yellow'
#set -g @themepack 'basic'
# set -g @plugin 'tmux-plugins/tmux-sessionist'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
# }}}
# }}}
